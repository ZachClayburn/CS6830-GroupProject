/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FinalProject;

import FinalProject.ast.helpers.LineASTHelper;
import FinalProject.oracle.fault.localizer.OracleFaultLocalizer;
import FinalProject.tarantula.fault.localizer.TarantulaFaultLocalizer;
import FinalProject.files.SourceSet;
import FinalProject.patcher.FixTemplates;
import FinalProject.patcher.IFixTemplate;
import com.github.javaparser.ast.stmt.Statement;
import net.sourceforge.argparse4j.ArgumentParsers;
import net.sourceforge.argparse4j.impl.Arguments;
import net.sourceforge.argparse4j.inf.ArgumentParserException;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class App implements Closeable {
    final CommandRunner commandRunner;
    final File modifiedFile;
    final File projectRootDirectory;
    final TarantulaFaultLocalizer tarantulaFaultLocalizer;
    final SourceSet sourceSet;
    String testName = null;
    List<IFixTemplate> fixTemplates = FixTemplates.getPatches();

    App(File projectRoot) throws IOException {
        commandRunner = new CommandRunner(projectRoot);
        this.projectRootDirectory = projectRoot;
        modifiedFile = Paths.get(projectRoot.toString(), "lib", "src", "main", "java", "testApplication", "simple", "Simple.java")
                            .toFile();
        tarantulaFaultLocalizer = new TarantulaFaultLocalizer(projectRoot, commandRunner);

        commandRunner.runJar(); // Ensure that the jars exist for the symbol solver to use
        SourceSet.setupSymbolSolver(projectRoot.toPath());
        sourceSet = SourceSet.fromProjectDirectory(projectRoot.toPath());
    }

    List<Path> getSimpleTestPaths() {
        List<Path> testPaths = new ArrayList<>();
        try (Stream<Path> stream = Files.walk(projectRootDirectory.toPath())) {
            List<Path> filePaths = stream.collect(Collectors.toList());
            for (Path filePath : filePaths) {
                if (filePath.toString().contains(".java") &&
                        filePath.toString().contains("Test") &&
                        !filePath.toString().contains("Negation") &&
                        filePath.toString().contains("Simple")) {
                    testPaths.add(filePath);
                }
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
            System.exit(1);
        }
        return testPaths;
    }

    void printPatch(long lineNumber, List<Statement> statements, String testClassName) {
        System.out.printf("To fix %s, replace line %d with:\n", testClassName, lineNumber);
        System.out.println(statements);
    }

    void run() {
        commandRunner.runBuild();
        try {
            for (Path path : getSimpleTestPaths()) {
                File file = path.toFile();
                long lineNumber = OracleFaultLocalizer.localizeFaults(file);
                String testClassName = file.getName().replace(".java", "");
                var node = LineASTHelper.getLineAST(modifiedFile, lineNumber);
                for (IFixTemplate template : fixTemplates) {
                    var nodeToChange = node.clone();
                    if (!template.checkNode(nodeToChange)) continue;
                    var changedNodes = template.applyPatch(nodeToChange);
                    LineASTHelper.writeASTLinesToFile(modifiedFile, changedNodes, lineNumber);
                    if (commandRunner.runBuild() && commandRunner.runSpecificTest(testClassName)) {
                        printPatch(lineNumber, changedNodes, testClassName);
                        sourceSet.restoreToDefault();
                        break;
                    }
                    sourceSet.restoreToDefault();
                }
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
            System.exit(1);
        }
//        try {
//            var x = LineASTHelper.getLineAST(new File(""), 34);
//            ArrayList<Statement> statements = new ArrayList<>();
//            statements.add(StaticJavaParser.parseStatement("c = a + b;"));
//            statements.add(StaticJavaParser.parseStatement("String s = \"test\";"));
//            LineASTHelper.writeASTLinesToFile(new File(""), statements, 34);
//            System.out.println(x.toString());
//        } catch (IOException ioException) {
//            ioException.printStackTrace();
//            System.exit(1);
//        }
    }

//    boolean tryNode(Node node, File fileName) {
//        for (IFixTemplate template : fixTemplates) {
//            var fix = template.generateFixes(node, fileName);
//            if (fix == null) continue;
//            try {
//                fix.writeBackFile();
//            } catch (IOException e) {
//                throw new RuntimeException(e);
//            }
//            // build failed, not a valid patch
//            if (!commandRunner.runBuild()) continue;
//            var testResults = testName == null ? commandRunner.runTests() : commandRunner.runSpecificTest(testName);
//            if (testResults) return true;
//        }
//        return false;
//    }

//    void run(File filePath) throws FileNotFoundException {
//        var optFixFile = sourceSet.get(filePath);
//        if (optFixFile.isEmpty()) {
//            throw new FileNotFoundException("Cannot find " + filePath);
//        }
//        var fixFile = optFixFile.get();
//        var fileContents = fixFile.getFileContents();
//        fileContents.stream().map(node -> tryNode(node, filePath)).filter(n -> n).findFirst();
//    }

    @Override
    public void close() throws IOException {
        sourceSet.close();
    }

    public void setTestName(String testName) {
        this.testName = testName;
    }

    public static void main(String[] args) {
        var parser = ArgumentParsers.newFor("Par").build().description("Automatic program repair");
        parser.addArgument("ProjectDir")
              .required(true)
              .type(Arguments.fileType().verifyIsDirectory())
              .help("Root directory of the project to apply automatic an automatic repair")
              .metavar("<Project root>");
        parser.addArgument("--fix-file").type(Arguments.fileType().verifyIsFile());
        parser.addArgument("--test-name");
        File testProjectDir = null;
        String testName = null;
        try {
            var res = parser.parseArgs(args);
            testProjectDir = res.get("ProjectDir");
            testName = res.get("test_name");
        } catch (ArgumentParserException e) {
            parser.handleError(e);
            System.exit(-1);
        }

        try (var app = new App(testProjectDir)) {
            app.setTestName(testName);
            app.run();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }

    }

}
